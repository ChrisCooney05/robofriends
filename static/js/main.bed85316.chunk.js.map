{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","this","props","name","email","id","className","src","alt","Component","CardList","robotCardsArray","robots","map","robot","i","key","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","children","ErrorBoundary","state","hasError","error","info","setState","hesError","App","event","searchField","target","value","fetch","then","res","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0RAgBeA,E,uKAbH,IAAD,EACqBC,KAAKC,MAAzBC,EADD,EACCA,KAAMC,EADP,EACOA,MAAOC,EADd,EACcA,GACrB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BF,EAA1B,iBAA6CG,IAAI,UACzD,6BACE,4BAAKL,GACL,2BAAIC,S,GARKK,aCaJC,E,uKAXH,IAEFC,EADaV,KAAKC,MAAhBU,OACuBC,KAAI,SAACC,EAAOC,GACzC,OACE,kBAAC,EAAD,CAAMC,IAAKD,EAAGV,GAAIS,EAAMT,GAAIF,KAAMW,EAAMX,KAAMC,MAAOU,EAAMV,WAG/D,OAAO,6BAAMO,O,GARMF,aCeRQ,E,uKAfH,IACAC,EAAmBjB,KAAKC,MAAxBgB,eACR,OACE,yBAAKZ,UAAU,OACb,2BACEA,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,S,GATIT,aCOTa,G,6KAJX,OAAO,yBAAKhB,UAAU,WAAWL,KAAKC,MAAMqB,c,GAF3Bd,cCoBNe,E,kDApBb,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IACDuB,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvB3B,KAAK4B,SAAS,CAAEC,UAAU,M,+BAI1B,OAAI7B,KAAKwB,MAAMC,SACN,wDAEFzB,KAAKC,MAAMqB,a,GAhBMd,aCqDbsB,G,wDA/Cb,aAAe,IAAD,8BACZ,gBAQFb,eAAiB,SAACc,GAChB,EAAKH,SAAS,CAAEI,YAAaD,EAAME,OAAOC,SAR1C,EAAKV,MAAQ,CACXb,OAAQ,GACRqB,YAAa,IAJH,E,gEAaO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKX,SAAS,CAAEjB,OAAQ4B,S,+BAKnC,IAAD,EACyBvC,KAAKwB,MAA7Bb,EADD,EACCA,OAAQqB,EADT,EACSA,YACVQ,EAAiB7B,EAAO8B,QAAO,SAAC5B,GACpC,OAAOA,EAAMX,KAAKwC,cAAcC,SAASX,EAAYU,kBAGvD,OAAK/B,EAAOiC,OAIR,yBAAKvC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWY,eAAgBjB,KAAKiB,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUN,OAAQ6B,IADpB,OAPC,wBAAInC,UAAU,MAAd,kB,GA7BKG,c,MCKEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAlC,GACLmC,QAAQnC,MAAMA,EAAMoC,c","file":"static/js/main.bed85316.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Card extends Component {\n  render() {\n    const { name, email, id } = this.props;\n    return (\n      <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n        <img src={`https://robohash.org/${id}?size=200x200`} alt=\"Robot\"></img>\n        <div>\n          <h2>{name}</h2>\n          <p>{email}</p>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Card;\n//we can use destructuring on this.props to make our code cleaner\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\n\nclass CardList extends Component {\n  render() {\n    const { robots } = this.props;\n    const robotCardsArray = robots.map((robot, i) => {\n      return (\n        <Card key={i} id={robot.id} name={robot.name} email={robot.email} />\n      );\n    });\n    return <div>{robotCardsArray}</div>;\n  }\n}\n\nexport default CardList;\n","import React, { Component } from \"react\";\n\nclass SearchBox extends Component {\n  render() {\n    const { onSearchChange } = this.props;\n    return (\n      <div className=\"pa2\">\n        <input\n          className=\"pa3 ba b--green bg-lightest-blue\"\n          type=\"search\"\n          placeholder=\"Search Robots\"\n          onChange={onSearchChange} //onChange picks up when txt is entered and executes function\n        />\n      </div>\n    );\n  }\n}\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\nimport \"../scroll.css\";\n\nclass Scroll extends Component {\n  render() {\n    return <div className=\"wrapper\">{this.props.children}</div>;\n  }\n}\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hesError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>O boy....yeah...not good</h1>;\n    }\n    return this.props.children;\n  }\n}\n//errorboundary is there to display a nicer error for users, it also helps in development to see where the error is\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"../app.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: \"\",\n    };\n  }\n  //by using an arrow function we can keep the value of this. as the App class, if not we will get an undefined\n  //error back\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value }); //uses to change the state object, must use setState()\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json()) //turn response into json\n      .then((users) => this.setState({ robots: users }));\n  }\n  //we now fetch users from an api and store that in state after App has mounted\n\n  //we filter the robots we have in state against the searchfield with have stored in state to return any matches\n  render() {\n    const { robots, searchField } = this.state;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    //0 evaluates as false and ! turns it into true so its easier to read vs .length === 0\n    if (!robots.length) {\n      return <h1 className=\"tc\">Loading...</h1>;\n    } else {\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f1\">RoboFriends</h1>\n          <SearchBox onSearchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundary>\n              <CardList robots={filteredRobots} />;\n            </ErrorBoundary>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n//scroll is a wrapper class\n//ErrorBoundary will catch any errors we get\n//we construct a onSearchChange method and pass that in as a prop to SearchBox\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}